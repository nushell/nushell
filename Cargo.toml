[package]
authors = ["The Nushell Project Developers"]
default-run = "nu"
description = "A new type of shell"
documentation = "https://www.nushell.sh/book/"
edition = "2021"
exclude = ["images"]
homepage = "https://www.nushell.sh"
license = "MIT"
name = "nu"
repository = "https://github.com/nushell/nushell"
rust-version = "1.67"
version = "0.76.1"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[package.metadata.binstall]
pkg-fmt = "tgz"
pkg-url = "{ repo }/releases/download/{ version }/{ name }-{ version }-{ target }.{ archive-format }"

[package.metadata.binstall.overrides.x86_64-pc-windows-msvc]
pkg-fmt = "zip"

[workspace]
members = [
	"crates/nu-cli",
	"crates/nu-cmd-lang",
	"crates/nu-command",
	"crates/nu-engine",
	"crates/nu-parser",
	"crates/nu-plugin",
	"crates/nu-protocol",
	"crates/nu-system",
	"crates/nu-utils",
	"crates/nu_plugin_custom_values",
	"crates/nu_plugin_example",
	"crates/nu_plugin_formats",
	"crates/nu_plugin_gstat",
	"crates/nu_plugin_inc",
	"crates/nu_plugin_query",
]

[dependencies]
chrono = { version = "0.4.23", features = ["serde"] }
crossterm = "0.24.0"
ctrlc = "3.2.1"
log = "0.4"
miette = { version = "5.5.0", features = ["fancy-no-backtrace"] }
nu-ansi-term = "0.46.0"
nu-cli = { path = "./crates/nu-cli", version = "0.76.1" }
nu-cmd-lang = { path = "./crates/nu-cmd-lang", version = "0.76.1" }
nu-color-config = { path = "./crates/nu-color-config", version = "0.76.1" }
nu-command = { path = "./crates/nu-command", version = "0.76.1" }
nu-engine = { path = "./crates/nu-engine", version = "0.76.1" }
nu-json = { path = "./crates/nu-json", version = "0.76.1" }
nu-parser = { path = "./crates/nu-parser", version = "0.76.1" }
nu-path = { path = "./crates/nu-path", version = "0.76.1" }
nu-plugin = { path = "./crates/nu-plugin", optional = true, version = "0.76.1" }
nu-pretty-hex = { path = "./crates/nu-pretty-hex", version = "0.76.1" }
nu-protocol = { path = "./crates/nu-protocol", version = "0.76.1" }
nu-system = { path = "./crates/nu-system", version = "0.76.1" }
nu-table = { path = "./crates/nu-table", version = "0.76.1" }
nu-term-grid = { path = "./crates/nu-term-grid", version = "0.76.1" }
nu-utils = { path = "./crates/nu-utils", version = "0.76.1" }

reedline = { version = "0.16.0", features = ["bashisms", "sqlite"] }

is_executable = "1.0.1"
rayon = "1.7.0"
simplelog = "0.12.0"
time = "0.3.12"

[target.'cfg(not(target_os = "windows"))'.dependencies]
# Our dependencies don't use OpenSSL on Windows
openssl = { version = "0.10.38", features = ["vendored"], optional = true }
signal-hook = { version = "0.3.14", default-features = false }

[target.'cfg(windows)'.build-dependencies]
winres = "0.1"

[target.'cfg(target_family = "unix")'.dependencies]
atty = "0.2"
nix = { version = "0.26", default-features = false, features = ["fs", "process", "signal", "term"] }

[dev-dependencies]
assert_cmd = "2.0.2"
criterion = "0.4"
hamcrest2 = "0.3.0"
itertools = "0.10.3"
nu-test-support = { path = "./crates/nu-test-support", version = "0.76.1" }
pretty_assertions = "1.0.0"
rstest = { version = "0.16.0", default-features = false }
serial_test = "1.0.0"
tempfile = "3.4.0"

[features]
plugin = ["nu-cli/plugin", "nu-command/plugin", "nu-engine/plugin", "nu-parser/plugin", "nu-plugin", "nu-protocol/plugin"]
# extra used to be more useful but now it's the same as default. Leaving it in for backcompat with existing build scripts
default = ["plugin", "sqlite", "trash-support", "which-support"]
extra = ["default"]
stable = ["default"]
wasi = []

# Enable to statically link OpenSSL; otherwise the system version will be used. Not enabled by default because it takes a while to build
static-link-openssl = ["dep:openssl"]

# Stable (Default)
trash-support = ["nu-command/trash-support"]
which-support = ["nu-command/which-support"]

# Extra

# Dataframe feature for nushell
dataframe = ["nu-command/dataframe"]

# SQLite commands for nushell
sqlite = ["nu-command/sqlite"]

[profile.release]
lto = "thin"
opt-level = "s"     # Optimize for size
strip = "debuginfo"

# build with `cargo build --profile profiling`
# to analyze performance with tooling like linux perf
[profile.profiling]
debug = true
inherits = "release"
strip = false

# build with `cargo build --profile ci`
# to analyze performance with tooling like linux perf
[profile.ci]
debug = false
inherits = "dev"
strip = false

# Main nu binary
[[bin]]
bench = false
name = "nu"
path = "src/main.rs"

# To use a development version of a dependency please use a global override here
# changing versions in each sub-crate of the workspace is tedious
[patch.crates-io]
nu-ansi-term = { git = "https://github.com/nushell/nu-ansi-term.git", branch = "main" }
reedline = { git = "https://github.com/nushell/reedline.git", branch = "main" }

# Criterion benchmarking setup
# Run all benchmarks with `cargo bench`
# Run individual benchmarks like `cargo bench -- <regex>` e.g. `cargo bench -- parse`
[[bench]]
harness = false
name = "benchmarks"
