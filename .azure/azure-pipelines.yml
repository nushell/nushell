trigger:
  - master

strategy:
  matrix:
    linux-stable:
      image: ubuntu-18.04
      style: 'unflagged'
    macos-stable:
      image: macos-10.14
      style: 'unflagged'
    windows-stable:
      image: windows-2019
      style: 'unflagged'
    linux-nightly-canary:
      image: ubuntu-18.04
      style: 'canary'
    macos-nightly-canary:
      image: macos-10.14
      style: 'canary'
    windows-nightly-canary:
      image: windows-2019
      style: 'canary'
    fmt:
      image: ubuntu-18.04
      style: 'fmt'

pool:
  vmImage: $(image)

steps:
  - script: |
      set -e
      if [ -e /etc/debian_version ]
      then
        sudo apt-get -y install libxcb-composite0-dev libx11-dev
      fi
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: "Install rust (*nix)"
    condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain stable
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: "Install rust (windows)"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - script: rustup component add rustfmt
    displayName: "Adding commponent rustfmt"
  - bash: |
      rustup default stable
      rustup update stable
    displayName: "Set correct Rust version"
  - script: |
      set -e
      echo "Rust up version"
      rustup -V
      echo "rustup installed commponents list"
      rustup component list --installed
      echo "rustup show:"
      rustup show
      echo "rustc -Vv"
      rustc -Vv
      echo "cargo -V"
      cargo -V
    displayName: Query rustup, rust and cargo versions
  - bash: RUSTFLAGS="-D warnings" cargo test --all --features=stable
    condition: eq(variables['style'], 'unflagged')
    displayName: Run tests
  - bash: RUSTFLAGS="-D warnings" cargo clippy --all --features=stable -- -D clippy::result_unwrap_used -D clippy::option_unwrap_used
    condition: eq(variables['style'], 'unflagged')
    displayName: Check clippy lints
  - bash: NUSHELL_ENABLE_ALL_FLAGS=1 RUSTFLAGS="-D warnings" cargo test --all --features=stable
    condition: eq(variables['style'], 'canary')
    displayName: Run tests
  - bash: NUSHELL_ENABLE_ALL_FLAGS=1 RUSTFLAGS="-D warnings" cargo clippy --all --features=stable -- -D clippy::result_unwrap_used -D clippy::option_unwrap_used
    condition: eq(variables['style'], 'canary')
    displayName: Check clippy lints
  - bash: cargo fmt --all -- --check
    condition: eq(variables['style'], 'fmt')
    displayName: Lint
